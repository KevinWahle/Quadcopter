		%Acc[0] = LPF_ACC_ALPHA * AccPrev[0] + (1.0f - LPF_ACC_ALPHA) * Acc[0];
alpha = 0.98
b = [1-alpha];
a = [1 -alpha];

[h,f] = freqz(b,a ,1024 , 1000);

plot(f, 20*log10(abs(h)))
grid on
xlabel('Frecuencia (Hz)')
ylabel('Magnitud (dB)')
%%
filter_obj = tf(b, a, 1/1000);
opts = bodeoptions;
opts.FreqUnits = 'Hz';

% Plot the Bode plot
figure;
%bode(filter_obj, opts);
%title('Bode Plot of First-Order Low-Pass Filter');
step(filter_obj)
%%
% Define the filter coefficients
b = [1, -0.5]; % Numerator coefficients
a = [1, -0.8]; % Denominator coefficients

% Create a discrete-time filter object
filter_obj = tf(b, a, 1); % Set the sampling time as 1

% Plot the step response
figure;
step(filter_obj);
title('Step Response of Discrete Filter');
xlabel('Samples');
ylabel('Amplitude');
%%
filterAccelerometer = filterAcc()
[num, den] = sos2tf(filterAcc);

%%
syms theta phi psi

Rx = [1         0                0    ;
      0         cos(phi)    -sin(phi) ;
      0         sin(phi)     cos(phi) ];
  
Ry = [cos(theta)    0       sin(theta);
      0             1           0     ;
     -sin(theta)    0       cos(theta)];
  
Rz = [cos(psi)   -sin(psi)      0     ;
      sin(psi)    cos(psi)      0     ;
        0           0           1    ];
 
R = (Rz*Ry*Rx)



%%

function  angles = ImuImplementation(freqInput,AccMatrix,GyroMatrix)
%#codegen
FUSE = imufilter('SampleRate',freqInput, 'OrientationFormat','Rotation matrix');
rotm = FUSE(AccMatrix,GyroMatrix);
angles = rotm2eul(rotm)*180/pi;
end
function Hd = filterAcc
%UNTITLED Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.4 and Signal Processing Toolbox 8.0.
% Generated on: 01-Jul-2023 21:54:41

% Butterworth Lowpass filter designed using FDESIGN.LOWPASS.

% All frequency values are in Hz.
Fs = 1000;  % Sampling Frequency

Fpass = 1;           % Passband Frequency
Fstop = 5;           % Stopband Frequency
Apass = 1;           % Passband Ripple (dB)
Astop = 20;          % Stopband Attenuation (dB)
match = 'stopband';  % Band to match exactly

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.lowpass(Fpass, Fstop, Apass, Astop, Fs);
Hd = design(h, 'butter', 'MatchExactly', match);

% [EOF]
end


